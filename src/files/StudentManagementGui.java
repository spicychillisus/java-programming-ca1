package files;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */


/**
 * @author DIT/FT/2B/23 P2323150 Ng Yu Jie
 */

import javax.swing.*;
import java.util.ArrayList;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


public class StudentManagementGui extends JFrame {
    private StudentManagement studentManagement = new StudentManagement();
    private Student selectedStudent = null;
    private ButtonGroup radioButtonGroup = new ButtonGroup();
    

     public StudentManagementGui() {
        initComponents();
        exitBtn.addActionListener(e -> {
            saveStudentsToFile();
            System.exit(0);
        });
        gpaField.setEditable(false);
        resultTextArea.setEditable(false);
        radioButtonGroup.add(adminRadioBtn);
        radioButtonGroup.add(nameRadioBtn);
        radioButtonGroup.add(classRadioBtn);
        radioButtonGroup.add(gpaRadioBtn);
        
         showModulesBtn.addActionListener(e -> {
            showStudentModules();
         });
                 
            showStudentsBtn.addActionListener(e -> {
            showAllStudents();
       });
           generateReportsBtn.addActionListener(e -> {
            generateReports();
        });
           
           gpaField.setEnabled(false);
    }

    /** 
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleTxt = new javax.swing.JLabel();
        studentTxt = new javax.swing.JLabel();
        nameTxt = new javax.swing.JLabel();
        admTxt = new javax.swing.JLabel();
        classTxt = new javax.swing.JLabel();
        gpaTxt = new javax.swing.JLabel();
        moduleTxt = new javax.swing.JLabel();
        modCodeTxt = new javax.swing.JLabel();
        modNameTxt = new javax.swing.JLabel();
        marksTxt = new javax.swing.JLabel();
        creditsTxt = new javax.swing.JLabel();
        searchTxt = new javax.swing.JLabel();
        resultsTxt = new javax.swing.JLabel();
        numModulesLabel = new javax.swing.JLabel();
        numModulesValue = new javax.swing.JLabel();
        adminRadioBtn = new javax.swing.JRadioButton();
        nameRadioBtn = new javax.swing.JRadioButton();
        classRadioBtn = new javax.swing.JRadioButton();
        gpaRadioBtn = new javax.swing.JRadioButton();
        showStudentsBtn = new javax.swing.JButton();
        createStudentBtn = new javax.swing.JButton();
        deleteStudentBtn = new javax.swing.JButton();
        clearFieldBtn = new javax.swing.JButton();
        addModuleBtn = new javax.swing.JButton();
        showModulesBtn = new javax.swing.JButton();
        cancelSearchBtn = new javax.swing.JButton();
        searchBtn = new javax.swing.JButton();
        exitBtn = new javax.swing.JButton();
        nameField = new javax.swing.JTextField();
        admField = new javax.swing.JTextField();
        classField = new javax.swing.JTextField();
        gpaField = new javax.swing.JTextField();
        modCodeField = new javax.swing.JTextField();
        modNameField = new javax.swing.JTextField();
        creditField = new javax.swing.JTextField();
        markField = new javax.swing.JTextField();
        searchField = new javax.swing.JTextField();
        resultScrollPane = new javax.swing.JScrollPane();
        resultTextArea = new javax.swing.JTextArea();
        generateReportsBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("student admin system");
        setBackground(new java.awt.Color(255, 204, 204));

        titleTxt.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        titleTxt.setText("STUDENT ADMIN SYSTEM");
        titleTxt.setPreferredSize(new java.awt.Dimension(200, 16));

        studentTxt.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        studentTxt.setText("Student");

        nameTxt.setText("Name:");

        admTxt.setText("Admin:");

        classTxt.setText("Class:");

        gpaTxt.setText("GPA:");

        moduleTxt.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        moduleTxt.setText("Module");

        modCodeTxt.setText("Mod Code:");

        modNameTxt.setText("Mod Name:");

        marksTxt.setText("Marks");

        creditsTxt.setText("Credit");

        searchTxt.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        searchTxt.setText("Search");

        resultsTxt.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        resultsTxt.setText("Results");

        numModulesLabel.setText("Number of Modules:");

        numModulesValue.setText("0");

        adminRadioBtn.setText("By Admin");

        nameRadioBtn.setText("By Name");

        classRadioBtn.setText("By Class");

        gpaRadioBtn.setText("By GPA");

        showStudentsBtn.setBackground(new java.awt.Color(0, 153, 255));
        showStudentsBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        showStudentsBtn.setText("Show all students");

        createStudentBtn.setBackground(new java.awt.Color(0, 153, 255));
        createStudentBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        createStudentBtn.setText("Create");
        createStudentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createStudentBtnActionPerformed(evt);
            }
        });

        deleteStudentBtn.setBackground(new java.awt.Color(255, 51, 51));
        deleteStudentBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        deleteStudentBtn.setText("Delete");
        deleteStudentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteStudentBtnActionPerformed(evt);
            }
        });

        clearFieldBtn.setBackground(new java.awt.Color(255, 255, 0));
        clearFieldBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        clearFieldBtn.setText("Clear fields");
        clearFieldBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearFieldBtnActionPerformed(evt);
            }
        });

        addModuleBtn.setBackground(new java.awt.Color(0, 153, 255));
        addModuleBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        addModuleBtn.setText("Add");
        addModuleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addModuleBtnActionPerformed(evt);
            }
        });

        showModulesBtn.setBackground(new java.awt.Color(0, 153, 255));
        showModulesBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        showModulesBtn.setText("Show all modules");
        showModulesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showModulesBtnActionPerformed(evt);
            }
        });

        cancelSearchBtn.setBackground(new java.awt.Color(255, 51, 51));
        cancelSearchBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        cancelSearchBtn.setText("Cancel");
        cancelSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelSearchBtnActionPerformed(evt);
            }
        });

        searchBtn.setBackground(new java.awt.Color(255, 255, 102));
        searchBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        exitBtn.setBackground(new java.awt.Color(255, 51, 51));
        exitBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        exitBtn.setText("Exit");

        gpaField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gpaFieldActionPerformed(evt);
            }
        });

        resultTextArea.setColumns(20);
        resultTextArea.setRows(5);
        resultScrollPane.setViewportView(resultTextArea);

        generateReportsBtn.setBackground(new java.awt.Color(102, 102, 102));
        generateReportsBtn.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        generateReportsBtn.setText("Generate report");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameTxt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(admTxt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(creditsTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(classTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(gpaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(modNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 34, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(admField, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(classField, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(gpaField, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(markField, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(modNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(creditField, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(modCodeField, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(marksTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(modCodeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(studentTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(showStudentsBtn))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(moduleTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(showModulesBtn))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(numModulesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(numModulesValue, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 12, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addModuleBtn)
                            .addComponent(deleteStudentBtn)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(clearFieldBtn, javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(createStudentBtn)
                                    .addGap(96, 96, 96)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(resultsTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(searchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(6, 6, 6)
                                            .addComponent(resultScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addContainerGap(96, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(generateReportsBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(exitBtn)
                        .addGap(49, 49, 49))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(titleTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(238, 238, 238))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(classRadioBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(gpaRadioBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(adminRadioBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nameRadioBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(searchBtn)
                                .addComponent(cancelSearchBtn)))
                        .addGap(98, 98, 98))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(titleTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(studentTxt)
                    .addComponent(searchTxt)
                    .addComponent(showStudentsBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(adminRadioBtn)
                    .addComponent(nameRadioBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameTxt)
                    .addComponent(createStudentBtn)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(classRadioBtn)
                    .addComponent(gpaRadioBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(admTxt)
                    .addComponent(deleteStudentBtn)
                    .addComponent(admField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(classTxt)
                    .addComponent(classField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clearFieldBtn)
                    .addComponent(searchBtn))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gpaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gpaField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelSearchBtn))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(resultsTxt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resultScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(exitBtn)
                            .addComponent(generateReportsBtn))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(moduleTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(showModulesBtn))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(modCodeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(modCodeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addModuleBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(modNameTxt)
                            .addComponent(modNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(marksTxt)
                            .addComponent(markField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(creditField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(creditsTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(numModulesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(numModulesValue)))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    private void createStudentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createStudentBtnActionPerformed
       String name = nameField.getText().trim();
       String adminNumber = admField.getText().trim();
       String studentClass = classField.getText().trim();

       // Validate name: must contain only letters and numbers
       if (!name.matches("[a-zA-Z0-9 ]+")) {
           showError("Name must contain only letters and numbers.");
           return;
       }

       // Validate admin number: must contain only letters and numbers
       if (!adminNumber.matches("[a-zA-Z0-9 ]+")) {
           showError("Admin Number must contain only letters and numbers.");
           return;
       }

       if (name.isEmpty() || adminNumber.isEmpty() || studentClass.isEmpty()) {
           showError("Name, Admin Number, and Class are compulsory fields!");
           return;
       }

       // Check for duplicate admin number
       for (Student student : studentManagement.getStudents()) {
           if (student.getAdminNumber().equals(adminNumber)) {
               showError("A student with this Admin Number already exists!");
               return;
           }
       }

       // Create and add new student
       Student student = new Student(adminNumber, name, studentClass);
       studentManagement.getStudents().add(student);

       // Set the newly created student as the selected student
       selectedStudent = student;
       showMessage("Student created successfully!");
       
       
       gpaField.setText("0.0");
          
       // Make fields non-editable
       nameField.setEditable(true);
       admField.setEditable(true);
       classField.setEditable(true);
    }//GEN-LAST:event_createStudentBtnActionPerformed
    
    private void deleteStudentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteStudentBtnActionPerformed
    if (selectedStudent == null) {
        showError("Please search and select a student first!");
        return;
    }

    studentManagement.getStudents().remove(selectedStudent);
    clearAllFields();
    showMessage("Student deleted successfully!");
    selectedStudent = null;

    // Make fields editable after deleting the student
    nameField.setEditable(true);
    admField.setEditable(true);
    classField.setEditable(true);
    }//GEN-LAST:event_deleteStudentBtnActionPerformed

    private void addModuleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addModuleBtnActionPerformed
     if (selectedStudent == null) {
        showError("Please search and select a student first!");
        return;
    }

    String code = modCodeField.getText().trim();
    String name = modNameField.getText().trim();
    String creditStr = creditField.getText().trim();
    String marksStr = markField.getText().trim();

    if (code.isEmpty() || name.isEmpty() || creditStr.isEmpty() || marksStr.isEmpty()) {
        showError("All module fields are compulsory!");
        return;
    }

    try {
        // Validate credits: positive integer, no decimals
        int credit = Integer.parseInt(creditStr);
        if (credit <= 0) {
            showError("Credits must be a positive integer.");
            return;
        }

        // Validate marks: positive integer or number with at most one decimal point
        double marks = Double.parseDouble(marksStr);
        if (marks < 0 || marks > 100) {
            showError("Marks must be between 0 and 100.");
            return;
        }

        if (!marksStr.matches("^\\d+(\\.\\d{1})?$")) {
            showError("Marks must be a positive integer or a number with at most one decimal point.");
            return;
        }

        Module existingModule = null;
        for (Module module : selectedStudent.getModules()) {
            if (module.getModuleCode().equalsIgnoreCase(code) && module.getModuleName().equalsIgnoreCase(name)) {
                existingModule = module;
                break;
            }
        }

        if (existingModule != null) {
            int response = JOptionPane.showConfirmDialog(this, 
                "A module with this code and name already exists. Do you want to update its information?", 
                "Update Module", JOptionPane.YES_NO_OPTION);

            if (response == JOptionPane.NO_OPTION) {
                return;
            } else {
                // Remove the existing module and add the new one with updated information
                selectedStudent.getModules().remove(existingModule);
                Module updatedModule = new Module(code, name, credit, marks);
                selectedStudent.addModule(updatedModule);
            }
        } else {
            // Check for duplicate module code or name
            for (Module module : selectedStudent.getModules()) {
                if (module.getModuleCode().equalsIgnoreCase(code)) {
                    showError("A module with this code already exists!");
                    return;
                }
                if (module.getModuleName().equalsIgnoreCase(name)) {
                    showError("A module with this name already exists!");
                    return;
                }
            }

            // Add new module
            Module module = new Module(code, name, credit, marks);
            selectedStudent.addModule(module);
        }

        // Update GPA after adding/updating the module
        double gpa = selectedStudent.getGPA();
        gpaField.setText(String.valueOf(gpa));
        
        checkGPA(selectedStudent);

        // Update the number of modules
        numModulesValue.setText(String.valueOf(selectedStudent.getModules().size()));

        clearModuleFields();
        showMessage("Module added/updated successfully!");
    } catch (NumberFormatException e) {
        showError("Invalid input for Credit or Marks!");
     }
    }//GEN-LAST:event_addModuleBtnActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
    String searchTerm = searchField.getText().trim();
    ArrayList<Student> students = studentManagement.getStudents();
    ArrayList<Student> matchingStudents = new ArrayList<>();

    // Determine which radio button is selected
    if (adminRadioBtn.isSelected()) {
        // Search by Admin Number
        for (Student student : students) {
            if (student.getAdminNumber().equals(searchTerm)) {
                matchingStudents.add(student);
            }
        }
    } else if (nameRadioBtn.isSelected()) {
        // Search by Name
        for (Student student : students) {
            if (student.getName().equalsIgnoreCase(searchTerm)) {
                matchingStudents.add(student);
            }
        }
    } else if (classRadioBtn.isSelected()) {
        // Search by Class
        for (Student student : students) {
            if (student.getStudentClass().equalsIgnoreCase(searchTerm)) {
                matchingStudents.add(student);
            }
        }
    } else if (gpaRadioBtn.isSelected()) {
        // Search by GPA
        try {
            double gpa = Double.parseDouble(searchTerm);
            for (Student student : students) {
                if (student.getGPA() == gpa) {
                    matchingStudents.add(student);
                }
            }
        } catch (NumberFormatException e) {
            showError("GPA must be a valid number.");
            return;
        }
    } else {
        showError("Please select a search criterion.");
        return;
    }

    // Handle search results
    if (matchingStudents.size() == 1) {
        // Only one student found
        selectedStudent = matchingStudents.get(0);
        displayStudent(selectedStudent);
        // Make fields non-editable when student is found
        nameField.setEditable(false);
        admField.setEditable(false);
        classField.setEditable(false);
    } else if (matchingStudents.size() > 1) {
        // Multiple students found
        String adminNumber = JOptionPane.showInputDialog(this, 
            "Multiple students found. Please enter the Admin Number:");
        if (adminNumber != null && !adminNumber.trim().isEmpty()) {
            for (Student student : matchingStudents) {
                if (student.getAdminNumber().equals(adminNumber.trim())) {
                    selectedStudent = student;
                    displayStudent(selectedStudent);
                    // Make fields non-editable when student is found
                    nameField.setEditable(false);
                    admField.setEditable(false);
                    classField.setEditable(false);
                    return;
                }
            }
            showError("No student found with the provided Admin Number.");
        } else {
            showError("Admin Number is required to identify the student.");
        }
    } else {
        // No student found
        clearAllFields();
        resultTextArea.setText("Student cannot be found!");
        resultScrollPane.revalidate();
        resultScrollPane.repaint();
        // Keep fields editable when no student is found
        nameField.setEditable(true);
        admField.setEditable(true);
        classField.setEditable(true);
     }
    }//GEN-LAST:event_searchBtnActionPerformed

    private void cancelSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelSearchBtnActionPerformed
        clearAllFields();
        nameField.setEditable(true);
        admField.setEditable(true);
        classField.setEditable(true);
        selectedStudent = null;
        radioButtonGroup.clearSelection();
    }//GEN-LAST:event_cancelSearchBtnActionPerformed

    private void clearFieldBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearFieldBtnActionPerformed
        clearAllFields();
        nameField.setEditable(true);
        admField.setEditable(true);
        classField.setEditable(true);
        selectedStudent = null;
    }//GEN-LAST:event_clearFieldBtnActionPerformed

    private void showModulesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showModulesBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_showModulesBtnActionPerformed

    private void gpaFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gpaFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_gpaFieldActionPerformed
    
    
        private void checkGPA(Student student) {
    if (student.getGPA() < 1.0) {
        JOptionPane.showMessageDialog(this, 
            "Warning: " + student.getName() + "'s GPA is below 1.0!", 
            "Low GPA Alert", 
            JOptionPane.WARNING_MESSAGE);
        }
    }
        
    private void showStudentModules() {
        if (selectedStudent == null) {
            showError("Please search and select a student first!");
            return;
        }
        
        StringBuilder modulesInfo = new StringBuilder("Modules for " + selectedStudent.getName() + ":\n");
        for (Module module : selectedStudent.getModules()) {
            modulesInfo.append(module).append("\n");
        }

        resultTextArea.setText(modulesInfo.toString());
        resultScrollPane.revalidate();
        resultScrollPane.repaint();
    }
    
    
    private void showAllStudents() {
        StringBuilder studentsInfo = new StringBuilder("All Students:\n");
        for (Student student : studentManagement.getStudents()) {
            studentsInfo.append(student).append("\n");
        }

        resultTextArea.setText(studentsInfo.toString());
        resultScrollPane.revalidate();
        resultScrollPane.repaint();
    }
        
        private void displayStudent(Student student) {
        nameField.setText(student.getName());
        admField.setText(student.getAdminNumber());
        classField.setText(student.getStudentClass());
        gpaField.setText(String.valueOf(student.getGPA()));

        // Update the number of modules label
        numModulesValue.setText(String.valueOf(student.getModules().size()));

        clearModuleFields();
        resultTextArea.setText(""); // Clear previous results

        // Disable editing of name, admin, and class fields
        nameField.setEditable(false);
        admField.setEditable(false);
        classField.setEditable(false);
    }
    
    private void clearFields() {
        nameField.setText("");
        admField.setText("");
        classField.setText("");
        gpaField.setText("");
        clearModuleFields();
    }

    private void clearModuleFields() {
        modCodeField.setText("");
        modNameField.setText("");
        creditField.setText("");
        markField.setText("");
    }

    private void clearAllFields() {
        clearFields();
        resultTextArea.setText("");
    }

    private void showError(String message) {
        JOptionPane.showMessageDialog(this, message, "Error", JOptionPane.ERROR_MESSAGE);
    }

    private void showMessage(String message) {
        JOptionPane.showMessageDialog(this, message, "Success", JOptionPane.INFORMATION_MESSAGE);
    }
        
    //advanced feature
    private void generateReports() {
    StringBuilder report = new StringBuilder("Student Reports:\n\n");
    report.append(generateHighestGPAReport()).append("\n");
    report.append(generateFailingStudentsReport()).append("\n");
    report.append(generateClassReports());

    resultTextArea.setText(report.toString());
    resultScrollPane.revalidate();
    resultScrollPane.repaint();
}

private String generateHighestGPAReport() {
    ArrayList<Student> students = studentManagement.getStudents();
    if (students.isEmpty()) {
        return "No students available for generating reports.";
    }

    Student topStudent = students.get(0);
    for (Student student : students) {
        if (student.getGPA() > topStudent.getGPA()) {
            topStudent = student;
        }
    }

    return "Student with the Highest GPA:\n" +
           "Name: " + topStudent.getName() + "\n" +
           "Admin Number: " + topStudent.getAdminNumber() + "\n" +
           "Class: " + topStudent.getStudentClass() + "\n" +
           "GPA: " + topStudent.getGPA() + "\n";
}

private String generateFailingStudentsReport() {
    StringBuilder report = new StringBuilder("Students Failing Any Module:\n");
    ArrayList<Student> students = studentManagement.getStudents();

    for (Student student : students) {
        for (Module module : student.getModules()) {
            if (module.getMarks() < 50) {
                report.append("Name: ").append(student.getName()).append("\n")
                      .append("Admin Number: ").append(student.getAdminNumber()).append("\n")
                      .append("Class: ").append(student.getStudentClass()).append("\n")
                      .append("Module: ").append(module.getModuleName()).append(" (").append(module.getModuleCode()).append(")\n")
                      .append("Marks: ").append(module.getMarks()).append("\n\n");
                break; // Only need to list student once if failing any module
            }
        }
    }

    return report.toString();
}
private String generateClassReports() {
    StringBuilder report = new StringBuilder("Students by Class:\n");
    ArrayList<Student> students = studentManagement.getStudents();
    Map<String, List<Student>> classMap = new HashMap<>();

    // Group students by class
    for (Student student : students) {
        classMap.computeIfAbsent(student.getStudentClass(), k -> new ArrayList<>()).add(student);
    }

    // Generate report for each class
    for (String className : classMap.keySet()) {
        report.append("Class: ").append(className).append("\n");
        for (Student student : classMap.get(className)) {
            report.append("Name: ").append(student.getName()).append("\n")
                  .append("Admin Number: ").append(student.getAdminNumber()).append("\n")
                  .append("GPA: ").append(student.getGPA()).append("\n\n");
        }
        report.append("\n");
    }

    return report.toString();
}
   
    
  private void saveStudentsToFile() {
    try (BufferedWriter writer = new BufferedWriter(new FileWriter("students.txt"))) {
        // Write the total number of students
        writer.write(String.valueOf(studentManagement.getStudents().size()));
        writer.newLine();

        for (Student student : studentManagement.getStudents()) {
            // Write student info
            writer.write(student.getStudentClass() + ";" +
                         student.getAdminNumber() + ";" +
                         student.getName() + ";" +
                         student.getModules().size() + ";");

            // Write module info
            for (Module module : student.getModules()) {
                writer.write(module.getModuleCode() + ";" +
                             module.getModuleName() + ";" +
                             module.getCreditUnit() + ";" +
                             module.getMarks() + ";");
            }

            // End line for current student
            writer.newLine();
        }
    } catch (IOException e) {
        showError("Failed to save student data to file.");
    }
}

   public static void main(String[] args) {
    // Ensure that GUI updates happen on the Event Dispatch Thread
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
        @Override
        public void run() {
            new StudentManagementGui().setVisible(true);
        }
    });
}
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addModuleBtn;
    private javax.swing.JTextField admField;
    private javax.swing.JLabel admTxt;
    private javax.swing.JRadioButton adminRadioBtn;
    private javax.swing.JButton cancelSearchBtn;
    private javax.swing.JTextField classField;
    private javax.swing.JRadioButton classRadioBtn;
    private javax.swing.JLabel classTxt;
    private javax.swing.JButton clearFieldBtn;
    private javax.swing.JButton createStudentBtn;
    private javax.swing.JTextField creditField;
    private javax.swing.JLabel creditsTxt;
    private javax.swing.JButton deleteStudentBtn;
    private javax.swing.JButton exitBtn;
    private javax.swing.JButton generateReportsBtn;
    private javax.swing.JTextField gpaField;
    private javax.swing.JRadioButton gpaRadioBtn;
    private javax.swing.JLabel gpaTxt;
    private javax.swing.JTextField markField;
    private javax.swing.JLabel marksTxt;
    private javax.swing.JTextField modCodeField;
    private javax.swing.JLabel modCodeTxt;
    private javax.swing.JTextField modNameField;
    private javax.swing.JLabel modNameTxt;
    private javax.swing.JLabel moduleTxt;
    private javax.swing.JTextField nameField;
    private javax.swing.JRadioButton nameRadioBtn;
    private javax.swing.JLabel nameTxt;
    private javax.swing.JLabel numModulesLabel;
    private javax.swing.JLabel numModulesValue;
    private javax.swing.JScrollPane resultScrollPane;
    private javax.swing.JTextArea resultTextArea;
    private javax.swing.JLabel resultsTxt;
    private javax.swing.JButton searchBtn;
    private javax.swing.JTextField searchField;
    private javax.swing.JLabel searchTxt;
    private javax.swing.JButton showModulesBtn;
    private javax.swing.JButton showStudentsBtn;
    private javax.swing.JLabel studentTxt;
    private javax.swing.JLabel titleTxt;
    // End of variables declaration//GEN-END:variables
}

//